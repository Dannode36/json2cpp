#include <vector>
#include <string>

struct MyClass1 {
    float x;
    float y;
};
struct MyClass2 {
    std::string name;
    int blockID;
    float averageDensity;
    float averageLandValue;
};
struct MyClass3 {
    int ethnicity;
    int frequency;
};
struct MyClass4 {
    std::string name;
    std::string preset;
    int districtID;
    std::vector<MyClass2> blocks;
    float averageLandValue;
    std::vector<MyClass3> dominantEthnicities;
};
struct MyClass5 {
    float x;
    float y;
    float z;
};
struct MyClass6 {
    int instanceID;
};
struct MyClass7 {
    float r;
    float g;
    float b;
    float a;
};
struct MyClass8 {
    MyClass6 baseMaterial;
    MyClass7 mainColour;
    MyClass7 colour1;
    MyClass7 colour2;
    MyClass7 colour3;
    float grubiness;
};
struct MyClass9 {
    std::string str;
    MyClass8 matKey;
    MyClass5 o;
};
struct MyClass10 {
    MyClass1 wo;
    int id;
    std::string p;
    int ow;
    int pw;
    int cw;
    bool oo;
    bool oa;
    int nos;
    bool isw;
    int cl;
    bool sw;
    std::vector<MyClass9> fr;
    bool dm;
    MyClass8 dmk;
    float ds;
    float ls;
};
struct MyClass11 {
    MyClass1 fc;
    MyClass1 ltc;
    MyClass5 nc;
    std::vector<MyClass10> w;
    int fh;
    int ft;
    float nwm;
    bool io;
    bool ia;
    bool ib;
    bool ios;
    bool ic;
    bool sll;
    bool sul;
    std::string fr;
    std::string frr;
    bool anf;
    bool wt;
    bool cav;
    bool fav;
};
struct MyClass12 {
    MyClass1 fc;
    MyClass1 ltc;
    MyClass5 nc;
    std::vector<void*> w;
    int fh;
    int ft;
    float nwm;
    bool io;
    bool ia;
    bool ib;
    bool ios;
    bool ic;
    bool sll;
    bool sul;
    std::string fr;
    std::string frr;
    bool anf;
    bool wt;
    bool cav;
    bool fav;
};
struct MyClass13 {
    std::string name;
    MyClass5 worldPos;
    int section;
    int angle;
};
struct MyClass14 {
    std::string name;
    int residenceNumber;
    bool isLobby;
    bool isMainLobby;
    bool isOutside;
    int access;
    std::vector<void*> rooms;
    std::string designStyle;
    int streetID;
    int district;
    std::vector<MyClass5> tiles;
    std::string streetSuffix;
    bool isAlley;
    bool isBackstreet;
    std::vector<int> sharedGround;
    std::vector<MyClass13> streetTiles;
};
struct MyClass15 {
    int tileID;
    MyClass1 floorCoord;
    MyClass5 globalTileCoord;
    bool isOutside;
    bool isObstacle;
    bool isAlley;
    bool isBackstreet;
    bool isEdge;
    int rotation;
    bool isEntrance;
    bool isMainEntrance;
    bool isStairwell;
    int stairwellRotation;
    bool isElevator;
    int elevatorRotation;
    bool isTop;
    bool isBottom;
    bool useOptimizedFloor;
    bool useOptimizedCeiling;
};
struct MyClass16 {
    std::string name;
    int floorID;
    int floor;
    std::vector<void*> addresses;
    std::vector<MyClass15> tiles;
    MyClass1 size;
    int defaultFloorHeight;
    int defaultCeilingHeight;
    int layoutIndex;
    int breakerSec;
    int breakerLights;
    int breakerDoors;
};
struct MyClass17 {
    int anchorPointIndex;
    int signPrefabIndex;
};
struct MyClass18 {
    int level;
    int index;
    MyClass5 duct;
    MyClass5 previous;
    MyClass5 next;
    MyClass5 node;
    bool peek;
    MyClass5 addRot;
};
struct MyClass19 {
    int buildingID;
    std::string name;
    std::vector<MyClass16> floors;
    std::string preset;
    int facing;
    bool isInaccessible;
    std::vector<MyClass17> sideSigns;
    std::vector<void*> airDucts;
    std::string designStyle;
    MyClass7 wood;
    std::string floorMaterial;
    MyClass8 floorMatKey;
    std::string ceilingMaterial;
    MyClass8 ceilingMatKey;
    std::string defaultWallMaterial;
    MyClass8 defaultWallKey;
    std::string extWallMaterial;
    MyClass8 extWallKey;
    std::string colourScheme;
    std::string floorMatOverride;
    std::string ceilingMatOverride;
    std::string wallMatOverride;
    std::string floorMatOverrideB;
    std::string ceilingMatOverrideB;
    std::string wallMatOverrideB;
};
struct MyClass20 {
    std::string name;
    int blockID;
    int districtID;
    MyClass1 cityCoord;
    MyClass19 building;
    std::vector<MyClass15> outsideTiles;
    int density;
    int landValue;
};
struct MyClass21 {
    int group;
    MyClass7 skinColourRange1;
    MyClass7 skinColourRange2;
    int blackHairRatio;
    int brownHairRatio;
    int blondeHairRatio;
    int gingerHairRatio;
    int RedHairRatio;
    int blueHairRatio;
    int greenHairRatio;
    int purpleHairRatio;
    int pinkHairRatio;
    int greyHairRatio;
    int whiteHairRatio;
    int baldHairRatioMale;
    int shortHairRatioMale;
    int longHairRatioMale;
    int baldHairRatioFemale;
    int shortHairRatioFemale;
    int longHairRatioFemale;
    int straightHairRatioMale;
    int curlyHairRatioMale;
    int balingHairRatioMale;
    int messyHairRatioMale;
    int styledHairRatioMale;
    int mohawkHairRatioMale;
    int afroHairRatioMale;
    int straightHairRatioFemale;
    int curlyHairRatioFemale;
    int balingHairRatioFemale;
    int messyHairRatioFemale;
    int styledHairRatioFemale;
    int mohawkHairRatioFemale;
    int afroHairRatioFemale;
    int blueEyesRatio;
    int brownEyesRatio;
    int greenEyesRatio;
    int greyEyesRatio;
    bool overrideFirst;
    int overrideNameFirst;
    bool overrideSur;
    int overrideNameSur;
    std::vector<int> culturalSimilarities;
    std::vector<MyClass6> ethTraits;
};
struct MyClass22 {
    int group;
    float ratio;
    MyClass21 stats;
};
struct MyClass23 {
    int feature;
    int id;
};
struct MyClass24 {
    float visualDistinctiveness;
    int build;
    int height;
    float heightCM;
    float weightKG;
    int shoeSize;
    int footwear;
    std::vector<MyClass22> ethnicities;
    MyClass7 skinColour;
    int hairColourCategory;
    MyClass7 hairColour;
    int hairType;
    int eyeColour;
    std::vector<MyClass23> facialFeatures;
};
struct MyClass25 {
    int traitID;
    std::string trait;
    int reason;
    std::string date;
};
struct MyClass26 {
    std::vector<int> digits;
    int type;
    int id;
    bool used;
    std::vector<int> notes;
};
struct MyClass27 {
    int category;
    std::vector<void*> clothes;
};
struct MyClass28 {
    int humanID;
    int home;
    std::string debugHome;
    float speedModifier;
    int job;
    std::string birthday;
    float societalClass;
    MyClass24 descriptors;
    int blood;
    std::string citizenName;
    std::string firstName;
    std::string casualName;
    std::string surName;
    bool homeless;
    float slangUsage;
    float genderScale;
    int gender;
    int bGender;
    float sexuality;
    float homosexuality;
    std::vector<int> attractedTo;
    int partner;
    int paramour;
    std::string anniversary;
    float sleepNeedMultiplier;
    float snoring;
    float snoreDelay;
    float humility;
    float emotionality;
    float extraversion;
    float agreeableness;
    float conscientiousness;
    float creativity;
    std::vector<void*> acquaintances;
    std::vector<MyClass25> traits;
    MyClass26 password;
    float maxHealth;
    float recoveryRate;
    float combatSkill;
    float combatHeft;
    float maxNerve;
    float breathRecovery;
    std::string handwriting;
    int sightingMemory;
    std::vector<std::string> favItems;
    std::vector<int> favItemRanks;
    std::vector<int> favCat;
    std::vector<int> favAddresses;
    std::vector<MyClass27> outfits;
    int favCol;
};
struct MyClass29 {
    int varType;
    float value;
    std::string str;
};
struct MyClass30 {
    MyClass7 colour;
    float intensity;
    float flickerColourMultiplier;
    float pulseSpeed;
    float intervalTime;
    bool flicker;
    float range;
};
struct MyClass31 {
    std::string preset;
    int id;
    float decimalStartTime;
    std::vector<int> weekDays;
    std::vector<int> members;
    int meetingPlace;
};
struct MyClass32 {
    int w;
    std::vector<int> s;
};
struct MyClass33 {
    int type;
    std::vector<MyClass32> routes;
    std::vector<int> rooms;
};
struct MyClass34 {
    int page;
    std::string evID;
    int meta;
    std::string discEvID;
    int disc;
    std::string seperation;
    std::string str;
    int order;
};
struct MyClass35 {
    std::string id;
    int page;
    std::vector<MyClass34> mpContent;
};
struct MyClass36 {
    int id;
    std::string preset;
    int owner;
    int writer;
    int reciever;
    std::string dds;
    std::vector<MyClass29> passed;
    MyClass5 n;
    bool cd;
};
struct MyClass37 {
    std::string build;
    std::string cityName;
    std::string seed;
    MyClass1 citySize;
    int population;
    int playersApartment;
    std::vector<MyClass4> districts;
    std::vector<MyClass14> streets;
    std::vector<MyClass20> cityTiles;
    std::vector<MyClass28> citizens;
    std::vector<void*> interactables;
    std::vector<MyClass31> groups;
    std::vector<MyClass33> pipes;
    std::vector<void*> criminals;
    std::vector<MyClass35> multiPage;
    std::vector<MyClass36> metas;
};
